// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GenericConverter is an autogenerated mock type for the GenericConverter type
type GenericConverter[proto interface{}, db interface{}] struct {
	mock.Mock
}

// DbToProto provides a mock function with given fields: _a0
func (_m *GenericConverter[proto, db]) DbToProto(_a0 *db) (*proto, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DbToProto")
	}

	var r0 *proto
	var r1 error
	if rf, ok := ret.Get(0).(func(*db) (*proto, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*db) *proto); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto)
		}
	}

	if rf, ok := ret.Get(1).(func(*db) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbToProtoSlice provides a mock function with given fields: _a0
func (_m *GenericConverter[proto, db]) DbToProtoSlice(_a0 []*db) ([]*proto, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DbToProtoSlice")
	}

	var r0 []*proto
	var r1 error
	if rf, ok := ret.Get(0).(func([]*db) ([]*proto, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]*db) []*proto); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto)
		}
	}

	if rf, ok := ret.Get(1).(func([]*db) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProtoToDb provides a mock function with given fields: _a0
func (_m *GenericConverter[proto, db]) ProtoToDb(_a0 *proto) (*db, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ProtoToDb")
	}

	var r0 *db
	var r1 error
	if rf, ok := ret.Get(0).(func(*proto) (*db, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*proto) *db); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db)
		}
	}

	if rf, ok := ret.Get(1).(func(*proto) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProtoToDbSlice provides a mock function with given fields: _a0
func (_m *GenericConverter[proto, db]) ProtoToDbSlice(_a0 []*proto) ([]*db, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ProtoToDbSlice")
	}

	var r0 []*db
	var r1 error
	if rf, ok := ret.Get(0).(func([]*proto) ([]*db, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]*proto) []*db); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db)
		}
	}

	if rf, ok := ret.Get(1).(func([]*proto) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGenericConverter creates a new instance of GenericConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericConverter[proto interface{}, db interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericConverter[proto, db] {
	mock := &GenericConverter[proto, db]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
