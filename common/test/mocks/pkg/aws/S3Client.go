// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/s3/types"
)

// S3Client is an autogenerated mock type for the S3Client type
type S3Client struct {
	mock.Mock
}

// CopyObject provides a mock function with given fields: srcBucket, destBucket, key
func (_m *S3Client) CopyObject(srcBucket string, destBucket string, key string) (*s3.CopyObjectOutput, error) {
	ret := _m.Called(srcBucket, destBucket, key)

	if len(ret) == 0 {
		panic("no return value specified for CopyObject")
	}

	var r0 *s3.CopyObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*s3.CopyObjectOutput, error)); ok {
		return rf(srcBucket, destBucket, key)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *s3.CopyObjectOutput); ok {
		r0 = rf(srcBucket, destBucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.CopyObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(srcBucket, destBucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteObjects provides a mock function with given fields: bucketName, keys
func (_m *S3Client) DeleteObjects(bucketName string, keys []string) (*s3.DeleteObjectsOutput, error) {
	ret := _m.Called(bucketName, keys)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjects")
	}

	var r0 *s3.DeleteObjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*s3.DeleteObjectsOutput, error)); ok {
		return rf(bucketName, keys)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *s3.DeleteObjectsOutput); ok {
		r0 = rf(bucketName, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.DeleteObjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(bucketName, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeadObject provides a mock function with given fields: bucketName, objectKey
func (_m *S3Client) HeadObject(bucketName string, objectKey string) (*s3.HeadObjectOutput, error) {
	ret := _m.Called(bucketName, objectKey)

	if len(ret) == 0 {
		panic("no return value specified for HeadObject")
	}

	var r0 *s3.HeadObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*s3.HeadObjectOutput, error)); ok {
		return rf(bucketName, objectKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) *s3.HeadObjectOutput); ok {
		r0 = rf(bucketName, objectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.HeadObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bucketName, objectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: bucketName, prefix
func (_m *S3Client) ListObjects(bucketName string, prefix *string) ([]types.Object, error) {
	ret := _m.Called(bucketName, prefix)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 []types.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string) ([]types.Object, error)); ok {
		return rf(bucketName, prefix)
	}
	if rf, ok := ret.Get(0).(func(string, *string) []types.Object); ok {
		r0 = rf(bucketName, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string) error); ok {
		r1 = rf(bucketName, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewS3Client creates a new instance of S3Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3Client {
	mock := &S3Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
